name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.PRODUCTION_PROJECT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test
        continue-on-error: true # Remove this when tests are set up

      - name: Run linter
        run: pnpm run lint
        continue-on-error: true # Temporarily disabled until ESLint is configured

      - name: Build application
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://jbqljjyctbsyawijlxfa.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: pnpm run build

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Run migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "üöÄ Deploying migrations to production..."
          # Using db-url directly to avoid SASL auth issues with special characters in password
          supabase db push --db-url "postgresql://postgres.${{ secrets.PRODUCTION_PROJECT_ID }}:${{ secrets.PRODUCTION_DB_PASSWORD_ENCODED }}@aws-0-us-east-1.pooler.supabase.com:5432/postgres"

      - name: Create release tag
        if: success()
        run: |
          VERSION=$(date +%Y.%m.%d-%H%M%S)
          git tag -a "v$VERSION" -m "Production release v$VERSION"
          git push origin "v$VERSION"

      - name: Notify success
        if: success()
        run: echo "‚úÖ Production deployment successful! Version v$VERSION"
        
      - name: Notify failure
        if: failure()
        run: echo "‚ùå Production deployment failed! Check logs immediately!"